"""
Django settings for TolgobolVillage project.

Generated by 'django-admin startproject' using Django 4.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-0olsdz*@2r8%z-qjy*&8c=5@(@go8l@y6cc-9z$ptai1uhqu08'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['gdjekk1r.beget.tech']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'MainService',
    'Forum',
    'AuthService'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'TolgobolVillage.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media'
            ],
        },
    },
]

WSGI_APPLICATION = 'TolgobolVillage.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'TolgobolVillage.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

# AUTH_PASSWORD_VALIDATORS = [
#     {
#         'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
#     },
# ]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'ru-ru'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ---------------------------------------------- Мои правки -----------------------

USE_L10N = True

from django.contrib.auth.password_validation import CommonPasswordValidator

ALLOWED_HOSTS = [ '127.0.0.1' ]


# Application definition
INSTALLED_APPS + [
    'authservice.apps.AuthserviceConfig',
    'account.apps.AccountConfig',
    'main.apps.MainConfig',
    'catalog.apps.CatalogConfig',
    'formtools',
    'exlude'
    ] 

import os
from django.urls.base import reverse_lazy
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join( BASE_DIR, 'static' )

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'MainService/static/'),
    os.path.join(BASE_DIR, 'Forum/static/'),
    os.path.join(BASE_DIR, 'AuthService/static/'),
]

MEDIA_ROOT = os.path.join( BASE_DIR, 'media' )
MEDIA_URL = '/media/'

AUTH_USER_MODEL = 'AuthService.User'

LOGIN_REDIRECT_URL = 'home'

LOGIN_URL = 'login'

SITE_ID = 'Тестовый сайт'

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'TolgobolVillage.password_validator.MyUserAttributeSimilarityValidator',
    },
    {
        'NAME': 'TolgobolVillage.password_validator.MyMinimumLengthValidator',
    },
    {
        'NAME': 'TolgobolVillage.password_validator.MyCommonPasswordValidator',
    },
    {
        'NAME': 'TolgobolVillage.password_validator.MyNumericPasswordValidator',
    },
]



LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'console': {
            'format': '%(name)-12s %(levelname)-8s %(message)s'
        },
        'file': {
            'format': '%(asctime)s\t [%(process)d][%(thread)d] %(name)-20s %(levelname)-8s %(funcName)s %(message)s',
        }
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'console'
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'formatter': 'file',
            'filename': os.path.join(BASE_DIR, 'log.log'),
        }
    },
    'loggers': {
        '': {
            'level': 'DEBUG',
            'handlers': ['file'],
            'propagate': True
        },
         'django': {
            'handlers': ['file'],
            'propagate': True,
        },
        'django.request': {
            'level': 'DEBUG',
            'handlers': ['file'],
            'propagate': True,
        },
        'MainService': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    }
}
import sys
import linecache, traceback, logging
logger = logging.getLogger(__name__)
def exception_hook( exc_type, exc_value, tb ):
    last_local_vars = []
    res = 'Traceback (most recent call last):\n'
    while tb:
        f = tb.tb_frame
        lineno = tb.tb_lineno
        co = f.f_code
        filename = co.co_filename
        name = co.co_name
        linecache.checkcache(filename)
        line = linecache.getline(filename, lineno, f.f_globals)
        filename = tb.tb_frame.f_code.co_filename
        name = tb.tb_frame.f_code.co_name
        line_no = tb.tb_lineno
        res = res + f"  File '{filename}', line {line_no}, in {name}\n"
        res = res + '  ' + line
        last_local_vars = tb.tb_frame.f_locals
        tb = tb.tb_next  
    lines = traceback.format_exception_only(exc_type, exc_value)
    for line in lines:
        res = res + str(line)
    res = res + str( last_local_vars ) + '\n'
    logger.exception( res )
    return res  
sys.excepthook = exception_hook 